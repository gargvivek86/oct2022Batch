
pragma solidity ^ 0.8.0;

contract Participants {

    address public owner;

    constructor() public {
       owner= msg.sender;
    }

    modifier onlyOwner() {
        require (msg.sender == owner);
        _;
    }
 
 struct participant {
     string name;
     uint8 age;
     uint32 phoneno;
 }
mapping (uint8 => participant) public learners;

 function addParticipant (uint8 key, string memory _name, uint8 _age, uint32 _phoneno) public onlyOwner {
     learners[key].name=_name;
     learners[key].age=_age;
     learners[key].phoneno= _phoneno;
 }
}



contract money {

address vivek= 0xdD870fA1b7C4700F2BD7f44238821C26f7392148;

function getMoney() public payable{}

function transferMoney() public {
    payable(vivek).transfer(address(this).balance);
}

}

// Inhertiance

contract parent {
    string name;
    function addName() public{
            name="Vivek";
    }
}

contract child is parent {

 function getName() public view returns(string memory){
     return name;
 }

}

contract functionSample {

string name;

//write function
 function addName(string memory _name) public {
     name=_name;
 }

 //read function

 function readName() public view returns(string memory){
     return name;
 }

 function Getname() public pure returns(uint8){
     return 1+1;
 }

}


contract eventSample {
    uint public balance=5;

    event moneyEvent(uint _amount);

    function addMoney(uint _amount) public {
        balance = balance + _amount;
        emit moneyEvent(_amount);
    }

}


contract errorhandling {
  
   uint public balance= 100;
   string public status= "Not Started";

   function deductBalance(uint _amount) public{
       status = "In-Progress";
       if (_amount < 1){
           revert ("Input amount is less than zero");
       }
       balance = balance - _amount;
   }

}

















